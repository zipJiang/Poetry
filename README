*****The Poetry Programming Language.*****

1. Introduction

The Poetry Programming Language is a tiny language trying to pander to the usually pragmatic programmers' sporadic zealotry for profoundness and sentimentality. Though till now this language provides nothing but a few basic operations to finish pedagogic tasks therefore unable to be utilized to facilitate practical problems, to its author however, writting programmes with the language of literature (that is, the language of ultimate beauty) will never be considered a despicable or even futile trial. Below is a short but comprehensive description of the language characteristics in Backus Naur Form.

1.1 <word>,
A <word> is a string of juxtaposed characters seperated by string. There are useful words and useless words, all the characters allowed are those in the alphabet and special punctuations including:
	" ' , . ; : - ? !
There are no particular reason for the relative small character set, a possible interpretation here could be given is that those are the most commonly encountered characters in English Poetry, those confined our users to this realative small characterset can result to a better resemblance to what, by common agreement is called "poetry".
The definition of tag <word> is like this:

	<word> -> (<char>{<char>})[<word>]
	
	<char> -> ( A | B | C | D | E | F | G | H | I | J | K | L | M | N
		  | O | P | Q | R | S | T | U | V | W | X | Y | Z | a | b
		  | c | d | e | f | g | h | i | j | k | l | m | n | o | p
		  | q | r | s | t | u | v | w | x | y | z )
	
	<mark> -> (", ', ., ;, -, \,, ?, !)

Here at the very beginning of this introduction file, I might reiterate the most unusual feature of PPL as a programming language, it is completely CASE INSENSITIVE. But there is one exceptional cases, that if a word is completely capitalized, it can be intentionally treated as a <useless> word.

1.2 <expr>
The definition of tag <expr> is very simple. Since we should make the lines as much readable as useful, as little as much restrictions on it should be made.

	<bloc> -> {<expr>}

	<expr> -> (<useless> \n) | <useful>

Any sentence that cannot be successfully translated by the compiler os considered <useless>. This actually considerable aggrandized the expressiveness of the Poetry Programming Language. As we'll come across later in the introduction part, the only restriction putting on the <useless> is that it should be a sentence that conveys no meaning.

1.3 <useful>
The part tagged <useful> is all the valid commands the compiler might recognize. Currently it includes the following functions:

	<useful> -> [<useless>]
		    (<if_stat> | <while_stat> | <for_stat> | <eval> | <def>)
		    [<useless>] \n

We will look at those statments one by one.

1.4.1 <if_stat>
The <if_stat> functions basically like those in the C family languages, with the difference that it can have many possible form as it is contrived to be in compliance with natural literary languages.

	<if_stat> -> if [<mark>] <eval> (, | \n) {<stmt>}
		     [[<useless>] (else | or | rather\,)
		     [<useless>] {<stmt>}]
		     (end | cease)[<mark>]

	<stmt> -> <mchd> | <umad>

	<mchd> -> if [<mark>] <eval> (, | \n) {<mchd>}
		  [<useless>] (else | or | rather\,)
		  [<useless>] {<mchd>}
		  (end | cease)[<mark>]
		  | non-if-statements

	<umad> -> if [<mark>] <eval> (, | \n) {<stmt>}
		  | if [<mark>] <eval> (, | \n) {<mchd>}
		  [<useless>] (else | or | rather\,)
		  [<useless>] {<umad>}
		  (end | cease)[<mark>]

1.4.2 <while_stat>
/**********To be implemented**********/

1.4.3 <for_stat>
/**********To be implemented**********/

1.4.3 <eval>
The expression under <eval> tag all have return values. Notice that though the result might be used in the <if_stat> or in a loop as the normaly do in C family languages, the real difference was that PPL currently has only one data type called int.

	<eval> -> <mevl> [<useless>] and [<useless>] <eval>

	<mevl> -> <num> [<useless>] <mevl>

	<num> -> [without] <nb>

	<nb> -> (one | two | three | four | five | six | seven | eight
		| nine | ten)
		| (eleven | twelve | thirteen | fourteen | fifteen
		| sixteen | seventeen | eighteen | nineteen)
		| (twenty | thirty | fourty | fifty | sixty | seventy | eighty | ninety) - 
		(one | two | three | four | five | six | seven | eight
		| nine | ten)
		| hundred | thousand | million | billion
